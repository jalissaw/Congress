{"version":3,"sources":["capitol.JPG","App.js","serviceWorker.js","index.js"],"names":["module","exports","Members","props","handleChange","e","setState","userInput","target","value","toUpperCase","repst","right","i","state","length","console","log","displayRight","left","senators","represenatives","bills","displayLeft","requests","map","url","fetch","type","dataType","headers","Promise","all","then","res","json","response","results","members","catch","err","this","buttons","display","inSenate","filter","senator","inHouse","represenative","find","bill","name","last_name","className","onChange","senate","key","id","short_title","first_name","title","party","date_of_birth","next_election","missed_votes","votes_with_party_pct","votes_against_party_pct","rep","onClick","style","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.17de79f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/capitol.083bb157.JPG\";","import React from 'react';\nimport './capitol.JPG'\n\n\nimport './App.css';\nconst key = 'xCaHBd8gI5ZJSOUXWFJGOXZBjJtMbvoIcip0kSmS'\n\nclass Members extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: null,\n      senators: [],\n      represenatives: [],\n      bills: [],\n      repst: 0,\n      displayLeft: 'none',\n      displayRight: 'block'\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      userInput: e.target.value.toUpperCase(),\n      repst: 0\n    })\n  }\n\n  right = (i) => {\n    if (this.state.repst + 1 < i.length)\n      this.setState({\n        repst: this.state.repst + 1,\n      });\n    if (this.state.repst === i.length - 1) {\n      // this.setState({\n      //   displayRight: 'none'\n      // })\n      console.log('end')\n    } else { this.setState({ displayRight: 'block' }) }\n    console.log(this.state.repst)\n    console.log(i.length)\n  }\n  left = (i) => {\n\n    if (this.state.repst - 1 > -1)\n      this.setState({\n        repst: this.state.repst - 1,\n      })\n\n\n  }\n\n  componentDidMount() {\n    const key = `xCaHBd8gI5ZJSOUXWFJGOXZBjJtMbvoIcip0kSmS`\n    const urls = [`https://api.propublica.org/congress/v1/116/senate/members.json`,\n      `https://api.propublica.org/congress/v1/102/house/members.json`,\n      `https://api.propublica.org/congress/v1/statements/latest.json`,\n      `https://api.propublica.org/congress/v1/bills/search.json`];\n\n    let requests = urls.map(url => fetch(url, {\n      type: \"GET\",\n      dataType: 'json',\n      headers: {\n        'X-API-Key': key\n      }\n    }))\n    Promise.all(requests)\n      .then(res => {\n        return Promise.all(res.map(res => res.json()));\n      }).then(response => {\n        this.setState({\n          senators: response[0].results[0].members,\n          represenatives: response[1].results[0].members,\n          bills: response[2].results\n        })\n        console.log(this.state.senators)\n        console.log(this.state.represenatives)\n      }).catch(err => {\n        console.log(err)\n      })\n\n  }\n\n  render() {\n\n\n    const { senators, bills, represenatives, userInput, repst } = this.state;\n\n    const style = {\n      buttons: {\n        displayLeft: this.state.display,\n        displayRight: this.state.display\n      }\n    };\n    const { buttons } = style;\n\n    const inSenate = senators.filter(\n      (senator) => senator.state === userInput\n    )\n\n    const inHouse = represenatives.filter(\n      (represenative) => represenative.state === userInput\n    )\n\n    const draft = bills.find(\n      (bill) => bill.name === inSenate.last_name)\n\n\n\n    return (\n\n      <div className=\"congress\">\n        <div className=\"users\">\n          <h2 className=\"titled\">Enter State Abbreviation</h2>\n          <h2>{this.state.userInput}</h2>\n          <input className=\"userInput\" onChange={this.handleChange} />\n        </div>\n\n        {inSenate.map((senate, i) => {\n          return (\n            <div key={senate.id} className=\"senate\">\n              <ul className=\"bio\">\n                <h2 >{senate.short_title + \" \" + senate.first_name + \" \" + senate.last_name}</h2>\n                <li>{senate.title}</li>\n                <li>State: <strong>{senate.state}</strong></li>\n                <li>Party: <strong>{senate.party}</strong></li>\n                <li>DOB: <strong>{senate.date_of_birth}</strong></li>\n                <li>Next Election: <strong>{senate.next_election}</strong></li>\n                <li>Missed Votes: <strong>{senate.missed_votes}</strong></li>\n                <li> Votes With Party Percentage: <strong>{senate.votes_with_party_pct + \"%\"}</strong></li>\n                <li>Votes Against Party Percentage: <strong>{senate.votes_against_party_pct + \"%\"}</strong></li>\n              </ul>\n            </div>\n          )\n        })}\n\n        {inHouse.map((rep, i) => {\n          return (\n            <div key={rep.id} className=\"house\">\n              <h2 className=\"numbers\" >Your state has {inHouse.length} Represenative(s)</h2>\n              <h2 className=\"namesHouse\">{rep.short_title + \" \" + inHouse[this.state.repst].first_name + \" \" + inHouse[this.state.repst].last_name}</h2>\n              <ul className=\"bio\">\n                <li  >{rep.title}</li>\n                <li  >State: <strong>{inHouse[this.state.repst].state}</strong></li>\n                <li  >Party: <strong>{inHouse[this.state.repst].party}</strong></li>\n                <li  >DOB: <strong>{inHouse[this.state.repst].date_of_birth}</strong></li>\n                <li  >Missed Votes: <strong>{inHouse[this.state.repst].missed_votes}</strong></li>\n                <li  > Votes With Party Percentage: <strong>{inHouse[this.state.repst].votes_with_party_pct + \"%\"}</strong></li>\n                <li  >Votes Against Party Percentage: <strong>{inHouse[this.state.repst].votes_against_party_pct + \"%\"}</strong></li>\n              </ul>\n              <button onClick={() => this.left(inHouse)} style={buttons} className=\"left btn\">Prev</button>\n              <button onClick={() => this.right(inHouse)} style={buttons} className=\"right btn\">Next</button>\n            </div>\n          )\n        })}\n      </div>\n\n    )\n  }\n}\n\nexport default Members;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Members from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Members />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}